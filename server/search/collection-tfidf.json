{"documentList":[{"projectName":"Project Portfolio","text":"First single page application with Angular 5 and TypeScript. Simple design allows admin to upload projects and coursework to be viewed by users. Users are able to filter/sort/search/view the projects. https://github.com/johnsonj561/Project-Portfolio 1/1/2018  Project scaffolding generated by angular-cli Admin sessions tracked with JSON Web Tokens Express server and API running on Node.js MongoDB data storage Running on Amazon AWS EC2SPA SPA SPA Angular Angular Angular Node.js Node.js Node.js Express Express Express MongoDB MongoDB MongoDB TypeScript TypeScript TypeScript AWS AWS AWS Project Portfolio Project Portfolio Project Portfolio Project Portfolio Project Portfolio "},{"projectName":"K Means Document Summarization","text":"A 10 sentence summary was generated from an original document containing 850 sentences with machine learning techniques. Once pre-processed, Python's Natural Language Toolkit (NLTK) was used to cluster the document into 10 groups with the K Means Algorithm. From each of the 10 clusters, the centroid was identified and extracted through use of cosine similarity measurements. Finally, the 10 resulting sentences were combined to produce a 10 sentence document summary. https://github.com/johnsonj561/K-Means-Document-Summarization 12/1/2017 Information Retrieval Tokenize, stem, stop word each sentence Cluster sentences into 10 groups using K Means clustering by NLTK Calculate the cosine similarity matrix for all sentence pairs in a given cluster, yielding 10 matrices, 1 per cluster For each Cosine Similarity matrix, Sum scores of each row to determine which row (sentence) has highest similarity with the most documents Return the sentence from each cluster that has highest similarity with other sentences of the cluster (returned by step 5)  Combine all 10 resulting high similarity sentences into 1 paragraph, which is to become the summary Sort the summary's sentences in the order that they appear in the original document, to maintain positional relationships of original document Return summaryMachine Learning Machine Learning Machine Learning K Means K Means K Means Clustering Clustering Clustering Python Python Python NLTK NLTK NLTK Cosine Similarity Cosine Similarity Cosine Similarity K Means Document Summarization K Means Document Summarization K Means Document Summarization K Means Document Summarization K Means Document Summarization "},{"projectName":"Levenshtein Distance","text":"The Levensthein distance between 2 strings is the sum of operations required to transform s1 into s2. It is commonly referred to as the edit distance between two strings. Operations include: insert, delete, substitute. This implementation scores each operation equally, as 1 point. Some algorithms may choose to weight substitution as 2 points, as it technically includes a delete followed by an insert.\n\nThe edit distance calculation was implemented with Dynamic Programming to achieve quadratic time complexity. Dynamic programming is the process of breaking a complex problem up into sub-problems, solving the sub-problems, and then combining the solutions of the sub-problems to achieve optimal solution. A matrix can often be used to store/recall solutions of sub-problems already completed. https://github.com/johnsonj561/Levenshtein-Distance 1/19/2018 Natural Language Processing Dynamic programming methodology Quadratic time and space complexityJavaScript JavaScript JavaScript Natural Language Processing Natural Language Processing Natural Language Processing Edit Distsance Edit Distsance Edit Distsance Levenshtein Distance Levenshtein Distance Levenshtein Distance Levenshtein Distance Levenshtein Distance "},{"projectName":"AngularJS Publish/Subscribe","text":"A simple implementation of the Publish/Subscribe pattern for AngularJS. This pattern is also referred to as Observer pattern. This service can be used as an alternative to AngularJS $broadcast/$emit/$on methods. https://github.com/johnsonj561/AngularJS-Publishing-Service 1/10/2018 undefined Publishing Service implements subscribe and notify methods Components subscribe to the publishing service, passing a channel key to listen on and a callback function Components call the Publishing Service's notify method with a channel key Publishing Service then fires all callback functions registered to the notify channelAngularJS AngularJS AngularJS JavaScript JavaScript JavaScript Design Pattern Design Pattern Design Pattern AngularJS Publish/Subscribe AngularJS Publish/Subscribe AngularJS Publish/Subscribe AngularJS Publish/Subscribe AngularJS Publish/Subscribe "},{"projectName":"Search & Classification API","text":"A final project for Information Retrieval that consists of Natural Language tool selection, research, and demo. As a JavaScript developer, I selected NPM package 'Natural' to implement search and text classification as a REST API. Natural's text pre-processing, TF-IDF calculation, and model serialization were utilized to build an index of web pages. The front facing application, implemented in AngularJS, allowed users to post URL's which would then be indexed on the backend. When user's post search queries, indexed documents are ranked using Cosine Similarity scoring. \n\nNatural's Naive Bayes classification model was trained on the 4 Universities Dataset and stored as JSON. User's are able to post a URL to the server for classification. The classifier then assigns a class of Student, Faculty, Project, or Course to the URL. Naive Bayes is a probabilistic machine learning method that outputs the most likely class, based off the evidence observed during training. https://github.com/johnsonj561/Search-and-Classification-With-Natural 12/1/2017 Information Retrieval Natural - natural language facility for Node.js, used for tokenization, stemming, and TF-IDF calculations Node.js Express server with RESP API Document term tf-idf matrices Query document cosine similarity AngularJS single page applicationJavaScript JavaScript JavaScript Search Search Search Classification Classification Classification AngularJS AngularJS AngularJS Node.js Node.js Node.js Express Express Express Natural Natural Natural Natural Language Processing Natural Language Processing Natural Language Processing Machine Learning Machine Learning Machine Learning Search & Classification API Search & Classification API Search & Classification API Search & Classification API Search & Classification API "},{"projectName":"WEKA Text Classification","text":"The Naïve Bayes and SVM classifiers were trained and tested with Weka using the provided data set containing both training and test data. Both models were tested using the document-word matrix generated by Weka's default StringToWordVector and the document-word matrix generated through custom StringToWordVector settings. The custom settings included a tf-idf transform and normalization. \n\nThe Support Vector Machine classifier out-performed the Naïve Bayes classifier, achieving an approximate 10% increase in test data classification accuracy.\n\nFull report available at Github URL. https://github.com/johnsonj561/Weka-Text-Classification 11/15/2017 Information Retrieval WEKA Naive Bayes Support Vector MachineMachine Learning Machine Learning Machine Learning Naive Bayes Naive Bayes Naive Bayes SVM SVM SVM Classification Classification Classification WEKA WEKA WEKA WEKA Text Classification WEKA Text Classification WEKA Text Classification WEKA Text Classification WEKA Text Classification "}]}
